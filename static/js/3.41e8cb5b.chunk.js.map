{"version":3,"sources":["components/Form/Form.module.css","components/Contacts/Contacts.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Form/Form.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","pages/ContactsPage.js"],"names":["module","exports","dispatch","fetchContactsRequest","axios","get","then","data","fetchContactsSuccess","catch","error","fetchContactsError","message","name","number","contact","console","log","addContactsRequest","post","addContactsSuccess","addContactsError","contactId","deleteContactsRequest","delete","deleteContactsSuccess","deleteContactsError","getItems","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","styles","form","width","label","display","flexDirection","marginBottom","Form","handleChange","target","value","setState","handleSubmit","event","preventDefault","props","map","alert","onSubmit","this","className","type","onChange","pattern","title","required","style","form__button","Component","connect","contactsSelectors","contactsOperations","Contacts","onDeleteContact","id","contactsList","contactsList__button","onClick","prototype","PropTypes","arrayOf","shape","string","isRequired","e","changeFilter","currentTarget","ContactsPage","fetchContacts"],"mappings":"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","file":"static/js/3.41e8cb5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__button\":\"Form_form__button__9ij5z\",\"form__label\":\"Form_form__label__23Nn4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"Contacts_contactsList__Chcrh\",\"contactsList__button\":\"Contacts_contactsList__button__1JOHi\"};","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n} from './contacts-actions';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error.message)));\n};\n\nconst addContacts = (name, number) => dispatch => {\n  const contact = { name, number };\n  console.log(contact);\n\n  dispatch(addContactsRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\n    .catch(error => dispatch(addContactsError(error.message)));\n};\n\nconst deleteContact = contactId => dispatch => {\n  dispatch(deleteContactsRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactsSuccess(contactId)))\n    .catch(error => dispatch(deleteContactsError(error.message)));\n};\n\n// eslint-disable-next-line\nexport default {\n  fetchContacts,\n  addContacts,\n  deleteContact,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getItems = state => state.contacts.items;\nconst getFilter = state => state.contacts.filter;\n\n// const getVisibleContacts = state => {\n//   const filter = getFilter(state);\n//   const contacts = getItems(state);\n//   const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// МЕМОИЗАЦИЯ\n\nconst getVisibleContacts = createSelector(\n  [getItems, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\n// eslint-disable-next-line\nexport default {\n  getItems,\n  getFilter,\n  getVisibleContacts,\n};\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport style from './Form.module.css';\n\nconst styles = {\n  form: {\n    width: 320,\n  },\n  label: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: 15,\n  },\n};\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    const { name } = this.state;\n\n    event.preventDefault();\n\n    const inputValue = this.props.contacts\n      .map(contact => contact.name.toLowerCase())\n      .includes(name.toLowerCase());\n\n    if (inputValue) {\n      alert(`Name '${name}' is already in contacts`);\n    } else {\n      this.props.onSubmit(this.state);\n    }\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.form}>\n        <label className={styles.label}>\n          Name\n          <br />\n          <input\n            type=\"text\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <br />\n        <label className={styles.label}>\n          Namber\n          <br />\n          <input\n            value={this.state.number}\n            onChange={this.handleChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <br />\n        <button className={style.form__button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsOperations.addContacts(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport styles from './Contacts.module.css';\n\nconst Contacts = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={styles.contactsList}>\n          {name}, {number}\n          <button\n            className={styles.contactsList__button}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContacts.prototype = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n","import PropTypes from 'prop-types';\n// import styles from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\n\nconst styles = {\n  label: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: 15,\n  },\n};\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className={styles.label}>\n      Find contacts by name: <br />\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Form from '../components/Form';\nimport Contacts from '../components/Contacts';\nimport Filter from '../components/Filter';\nimport { contactsOperations } from '../redux/contacts';\n\nclass ContactsPage extends Component {\n  state = {};\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <Form />\n        <h2>Contacts</h2>\n        <Filter />\n        <Contacts />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactsPage);\n"],"sourceRoot":""}